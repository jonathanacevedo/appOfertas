/**
 * Microservicio personas
 * Este micro se utiliza para gestionar el servicios de personas tanto clientes como administradores y super-administradores
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alexis.correa@accenture.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { JsonApiBodyRequest } from '../model/jsonApiBodyRequest';
import { JsonApiBodyRequestDelete } from '../model/jsonApiBodyRequestDelete';
import { JsonApiBodyResponseErrors } from '../model/jsonApiBodyResponseErrors';
import { JsonApiBodyResponseSuccess } from '../model/jsonApiBodyResponseSuccess';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PersonasService {

    protected basePath = 'https://localhost:8090/personas';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * registro de personas
     * registro de personas clientes y administradores
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editarPut(body: JsonApiBodyRequest, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyResponseSuccess>;
    public editarPut(body: JsonApiBodyRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyResponseSuccess>>;
    public editarPut(body: JsonApiBodyRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyResponseSuccess>>;
    public editarPut(body: JsonApiBodyRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editarPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<JsonApiBodyResponseSuccess>(`${this.basePath}/editar`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * eliminar persona
     * 
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eliminarDelete(body: JsonApiBodyRequestDelete, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyResponseSuccess>;
    public eliminarDelete(body: JsonApiBodyRequestDelete, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyResponseSuccess>>;
    public eliminarDelete(body: JsonApiBodyRequestDelete, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyResponseSuccess>>;
    public eliminarDelete(body: JsonApiBodyRequestDelete, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling eliminarDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<JsonApiBodyResponseSuccess>(`${this.basePath}/eliminar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buscar una personas por el tipo de rol
     * 
     * @param estado se recibe el rol del usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarEstadoEstadoGet(estado: string, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyRequest>;
    public listarEstadoEstadoGet(estado: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyRequest>>;
    public listarEstadoEstadoGet(estado: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyRequest>>;
    public listarEstadoEstadoGet(estado: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling listarEstadoEstadoGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<JsonApiBodyRequest>(`${this.basePath}/listar/estado/${encodeURIComponent(String(estado))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buscar personas
     * devuelve todos los usuarios que esten almacenados
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarGet(observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyRequest>;
    public listarGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyRequest>>;
    public listarGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyRequest>>;
    public listarGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<JsonApiBodyRequest>(`${this.basePath}/listar`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buscar una persona
     * 
     * @param id ID of pet that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyRequest>;
    public listarIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyRequest>>;
    public listarIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyRequest>>;
    public listarIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listarIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<JsonApiBodyRequest>(`${this.basePath}/listar/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buscar una personas por el tipo de rol
     * 
     * @param rol se recibe el rol del usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarRolRolGet(rol: string, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyRequest>;
    public listarRolRolGet(rol: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyRequest>>;
    public listarRolRolGet(rol: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyRequest>>;
    public listarRolRolGet(rol: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (rol === null || rol === undefined) {
            throw new Error('Required parameter rol was null or undefined when calling listarRolRolGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<JsonApiBodyRequest>(`${this.basePath}/listar/rol/${encodeURIComponent(String(rol))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * registro de personas
     * registro de personas clientes y administradores
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registrarPost(body: JsonApiBodyRequest, observe?: 'body', reportProgress?: boolean): Observable<JsonApiBodyResponseSuccess>;
    public registrarPost(body: JsonApiBodyRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JsonApiBodyResponseSuccess>>;
    public registrarPost(body: JsonApiBodyRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JsonApiBodyResponseSuccess>>;
    public registrarPost(body: JsonApiBodyRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registrarPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<JsonApiBodyResponseSuccess>(`${this.basePath}/registrar`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
