/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonApiBodyRequest;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.model.RegistrarRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-15T14:28:12.248Z")

@Api(value = "listar", description = "the listar API")
public interface ListarApi {

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar", nickname = "listarGet", notes = "devuelve todos los negocios que esten almacenados", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocios encontrados", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Iterable<RegistrarRequest>> listarGet();

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio", nickname = "listarIdGet", notes = "", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarIdGet(@ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathVariable("id") String id);

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio por el tipo de negocio", nickname = "listarNegocioTipoGet", notes = "", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/negocio/{tipo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Iterable<RegistrarRequest>> listarNegocioTipoGet(@ApiParam(value = "se recibe el tipo de negocio",required=true) @PathVariable("tipo") String tipo);

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio por la ciudad", nickname = "listarNegocioCiudadGet", notes = "", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/ciudad/{ciudad}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Iterable<RegistrarRequest>> listarNegocioCiudadGet(@ApiParam(value = "se recibe el tipo de negocio",required=true) @PathVariable("ciudad") String ciudad);
    
    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio por la id del admin", nickname = "listarNegocioAdminGet", notes = "", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/admin/{idadmin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Iterable<RegistrarRequest>> listarNegocioAdminGet(@ApiParam(value = "se recibe el tipo de negocio",required=true) @PathVariable("idadmin") String idadmin);
}
