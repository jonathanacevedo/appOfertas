/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package orquestador.api;

import io.swagger.annotations.*;
import orquestador.model.JsonApiBodyRequestNegocio;
import orquestador.model.JsonApiBodyRequestOferta;
import orquestador.model.JsonApiBodyRequestPersona;
import orquestador.model.JsonApiBodyResponseErrors;
import orquestador.model.JsonApiBodyResponseSuccess;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-17T14:53:38.878-05:00")

@Api(value = "editar", description = "the editar API")
public interface EditarApi {

    @ApiOperation(value = "edita negocio", nickname = "editarNegocioPut", notes = "edita todo tipo de ofertas", response = JsonApiBodyResponseSuccess.class, tags={ "negocio", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas edita correctamente", response = JsonApiBodyResponseSuccess.class),
        @ApiResponse(code = 400, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/negocio",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccess> editarNegocioPut(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestNegocio body);


    @ApiOperation(value = "edita ofertas", nickname = "editarOfertaPut", notes = "edita todo tipo de ofertas", response = JsonApiBodyResponseSuccess.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas edita correctamente", response = JsonApiBodyResponseSuccess.class),
        @ApiResponse(code = 400, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/oferta",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccess> editarOfertaPut(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestOferta body);


    @ApiOperation(value = "edita persona", nickname = "editarPersonaPut", notes = "edita todo tipo de ofertas", response = JsonApiBodyResponseSuccess.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas edita correctamente", response = JsonApiBodyResponseSuccess.class),
        @ApiResponse(code = 400, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/editar/persona",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<JsonApiBodyResponseSuccess> editarPersonaPut(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody JsonApiBodyRequestPersona body);

}
