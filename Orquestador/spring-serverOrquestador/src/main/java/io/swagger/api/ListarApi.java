/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonApiBodyRequestNegocio;
import io.swagger.model.JsonApiBodyRequestOferta;
import io.swagger.model.JsonApiBodyRequestPersona;
import io.swagger.model.JsonApiBodyResponseErrorsNegocio;
import io.swagger.model.JsonApiBodyResponseErrorsOferta;
import io.swagger.model.JsonApiBodyResponseErrorsPersona;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-23T20:32:20.792Z")

@Api(value = "listar", description = "the listar API")
public interface ListarApi {

    @ApiOperation(value = "buscar un negocio por la ciudad", nickname = "listarNegocioCiudadCiudadGet", notes = "", response = JsonApiBodyRequestNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequestNegocio.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsNegocio.class) })
    @RequestMapping(value = "/listar/negocio/ciudad/{ciudad}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestNegocio> listarNegocioCiudadCiudadGet(@ApiParam(value = "se recibe la ciudad del negocio",required=true) @PathVariable("ciudad") String ciudad);


    @CrossOrigin(origins = "*")
   @ApiOperation(value = "buscar un negocio", nickname = "listarNegocioIdGet", notes = "", response = JsonApiBodyRequestNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequestNegocio.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsNegocio.class) })
    @RequestMapping(value = "/listar/negocio/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestNegocio> listarNegocioIdGet(@ApiParam(value = "ID del negocio a buscar",required=true) @PathVariable("id") String id);


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio por el admin del negocio", nickname = "listarNegocioIdadminIdadminGet", notes = "", response = JsonApiBodyRequestNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequestNegocio.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsNegocio.class) })
    @RequestMapping(value = "/listar/negocio/idadmin/{idadmin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestNegocio> listarNegocioIdadminIdadminGet(@ApiParam(value = "se recibe el admin del negocio",required=true) @PathVariable("idadmin") String idadmin);


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar un negocio por el tipo de negocio", nickname = "listarNegocioTipoTipoGet", notes = "", response = JsonApiBodyRequestNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocio encontrado", response = JsonApiBodyRequestNegocio.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsNegocio.class) })
    @RequestMapping(value = "/listar/negocio/tipo/{tipo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestNegocio> listarNegocioTipoTipoGet(@ApiParam(value = "se recibe el tipo de negocio",required=true) @PathVariable("tipo") String tipo);


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar", nickname = "listarNegociosGet", notes = "devuelve todos los negocios que esten almacenados", response = JsonApiBodyRequestNegocio.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "negocios encontrados", response = JsonApiBodyRequestNegocio.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsNegocio.class) })
    @RequestMapping(value = "/listar/negocios",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestNegocio> listarNegociosGet();


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar", nickname = "listarOfertasGet", notes = "devuelve todas las ofertas que esten almacenadas", response = JsonApiBodyRequestOferta.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas encontradas", response = JsonApiBodyRequestOferta.class),
        @ApiResponse(code = 404, message = "datos incompletos o incorrectos", response = JsonApiBodyResponseErrorsOferta.class) })
    @RequestMapping(value = "/listar/ofertas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestOferta> listarOfertasGet();


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar una oferta por id del negocio", nickname = "listarOfertasIdnegocioIdnegocioGet", notes = "", response = JsonApiBodyRequestOferta.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "oferta encontrada", response = JsonApiBodyRequestOferta.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsOferta.class) })
    @RequestMapping(value = "/listar/ofertas/idnegocio/{idnegocio}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestOferta> listarOfertasIdnegocioIdnegocioGet(@ApiParam(value = "se recibe el id del negocio propietario de la oferta",required=true) @PathVariable("idnegocio") String idnegocio);


    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar una persona por el estado", nickname = "listarPersonaEstadoEstadoGet", notes = "", response = JsonApiBodyRequestPersona.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequestPersona.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsPersona.class) })
    @RequestMapping(value = "/listar/persona/estado/{estado}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestPersona> listarPersonaEstadoEstadoGet(@ApiParam(value = "se recibe el estado del usuario",required=true) @PathVariable("estado") String estado);

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar una persona", nickname = "listarPersonaIdGet", notes = "", response = JsonApiBodyRequestPersona.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequestPersona.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsPersona.class) })
    @RequestMapping(value = "/listar/persona/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestPersona> listarPersonaIdGet(@ApiParam(value = "Id de la persona a buscar",required=true) @PathVariable("id") String id);

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar una personas por el tipo de rol", nickname = "listarPersonaRolRolGet", notes = "", response = JsonApiBodyRequestPersona.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequestPersona.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsPersona.class) })
    @RequestMapping(value = "/listar/persona/rol/{rol}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JsonApiBodyRequestPersona> listarPersonaRolRolGet(@ApiParam(value = "se recibe el rol del usuario",required=true) @PathVariable("rol") String rol);

    @CrossOrigin(origins = "*")
    @ApiOperation(value = "buscar personas", nickname = "listarPersonasGet", notes = "devuelve todos los usuarios que esten almacenados", response = JsonApiBodyRequestPersona.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "personas encontradas", response = JsonApiBodyRequestPersona.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrorsPersona.class) })
    @RequestMapping(value = "/listar/personas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarPersonasGet();

}
